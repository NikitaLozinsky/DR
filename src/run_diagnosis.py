import argparse
import os
import sys
import logging
import pandas as pd
import joblib
from pathlib import Path
from config import RESULTS_DIR, DATASET_DIR, FEATURE_THRESHOLDS, HEALTHY_FEATURE_RANGES
from preprocess_images import ImageProcessor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class RetinopathyDiagnosis:
    def __init__(self):
        self.origin_model = None
        self.goty_model = None
        self.goty_scaler = None
        self.goty_features = None
        self.current_mode = 'origin'  # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.processor = ImageProcessor()

    def load_resources(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏
            self.origin_model = joblib.load(RESULTS_DIR / 'origin_model.pkl')
            self.goty_model = joblib.load(RESULTS_DIR / 'best_model_enhanced.pkl')
            self.goty_scaler = joblib.load(RESULTS_DIR / 'scaler_enhanced.pkl')
            self.goty_features = pd.read_csv(DATASET_DIR / 'top_features.csv').iloc[:, 0].tolist()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return False

    def analyze_image(self, image_path):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            features = self.processor.process_image(image_path)
            if not features:
                return None

            if self.current_mode == 'origin':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 2 –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏–∑ –¢–ó
                selected_features = {
                    'mean_brightness': features['mean_brightness'],
                    'std_brightness': features['std_brightness']
                }
                features_df = pd.DataFrame([selected_features])

                # –î–ª—è origin –º–æ–¥–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                prediction = self.origin_model.predict(features_df)[0]
                probability = self.origin_model.predict_proba(features_df)[0]
            else:
                # –†–µ–∂–∏–º goty - –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                selected_features = {f: features[f] for f in self.goty_features if f in features}
                features_df = pd.DataFrame([selected_features])
                features_scaled = self.goty_scaler.transform(features_df)
                prediction = self.goty_model.predict(features_scaled)[0]
                probability = self.goty_model.predict_proba(features_scaled)[0]

            return {
                'prediction': prediction,
                'confidence': probability[1] if prediction == 1 else probability[0],
                'features': features,
                'mode': self.current_mode
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ {self.current_mode}: {e}")
            return None

    def switch_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.current_mode = 'goty' if self.current_mode == 'origin' else 'origin'
        return self.current_mode


def clean_path(path_string):
    """–û—á–∏—Å—Ç–∫–∞ –ø—É—Ç–∏ –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    return path_string.strip().strip('"').strip("'")


def interactive_mode(diagnosis):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    print("=" * 60)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ò–ê–ë–ï–¢–ò–ß–ï–°–ö–û–ô –†–ï–¢–ò–ù–û–ü–ê–¢–ò–ò")
    print("=" * 60)
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("- –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print("- 'mode' - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("- 'exit' - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print(f"\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {diagnosis.current_mode}")
    print("  origin: —Ç–æ–ª—å–∫–æ mean_brightness –∏ std_brightness (–ø–æ –¢–ó)")
    print("  goty: –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")

    while True:
        user_input = input(f"\n[{diagnosis.current_mode}] –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ").strip()

        if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        if user_input.lower() == 'mode':
            new_mode = diagnosis.switch_mode()
            mode_description = "—Ç–æ–ª—å–∫–æ mean_brightness –∏ std_brightness (–¢–ó)" if new_mode == 'origin' else "–≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"
            print(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_mode} ({mode_description})")
            continue

        image_path = clean_path(user_input)

        if not os.path.exists(image_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{image_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            continue

        result = diagnosis.analyze_image(image_path)
        if result:
            status = "–ï—Å—Ç—å —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏—è" if result['prediction'] == 1 else "–ù–µ—Ç —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏–∏"
            print(f"\nüìä –†–µ–∂–∏–º: {result['mode']}")
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if result['mode'] == 'origin':
                print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: mean_brightness, std_brightness")
                print(f"   - mean_brightness: {result['features']['mean_brightness']:.2f}")
                print(f"   - std_brightness: {result['features']['std_brightness']:.2f}")
            else:
                print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: –≤—Å–µ {len(result['features'])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                top_features = ['microaneurysms_count', 'exudates_area', 'vessel_length',
                                'dark_to_light_ratio', 'entropy_mean']
                print("   –°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
                for feature in top_features:
                    if feature in result['features']:
                        print(f"   - {feature}: {result['features'][feature]:.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    parser = argparse.ArgumentParser(description='–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏–∏')
    parser.add_argument('--image', '-i', help='–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--mode', '-m', choices=['origin', 'goty'], default='origin',
                        help='–†–µ–∂–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: origin (2 –ø—Ä–∏–∑–Ω–∞–∫–∞) –∏–ª–∏ goty (–≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)')
    args = parser.parse_args()

    diagnosis = RetinopathyDiagnosis()
    if not diagnosis.load_resources():
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–±—É—á–∏–ª–∏ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        sys.exit(1)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    diagnosis.current_mode = args.mode

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    if args.image:
        result = diagnosis.analyze_image(args.image)
        if result:
            print(f"–†–µ–∂–∏–º: {result['mode']}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ï—Å—Ç—å —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏—è' if result['prediction'] == 1 else '–ù–µ—Ç —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏–∏'}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if result['prediction'] == 1:
                print("\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏–∏:")
                if result['features'].get('microaneurysms_count', 0) > FEATURE_THRESHOLDS['microaneurysms_count']:
                    print(f"- –ú–∏–∫—Ä–æ–∞–Ω–µ–≤—Ä–∏–∑–º—ã: {result['features']['microaneurysms_count']}")
                if result['features'].get('exudates_area', 0) > FEATURE_THRESHOLDS['exudates_area']:
                    print(f"- –≠–∫—Å—Å—É–¥–∞—Ç—ã: {result['features']['exudates_area']:.2f}")
            else:
                print("\n–ü—Ä–∏–∑–Ω–∞–∫–∏ –∑–¥–æ—Ä–æ–≤–æ–π —Å–µ—Ç—á–∞—Ç–∫–∏:")
                if result['features'].get('microaneurysms_count', 0) <= FEATURE_THRESHOLDS['microaneurysms_count']:
                    print(f"- –ú–∏–∫—Ä–æ–∞–Ω–µ–≤—Ä–∏–∑–º—ã: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                if result['features'].get('exudates_area', 0) <= FEATURE_THRESHOLDS['exudates_area']:
                    print(f"- –≠–∫—Å—Å—É–¥–∞—Ç—ã: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            sys.exit(1)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_mode(diagnosis)


if __name__ == "__main__":
    main()